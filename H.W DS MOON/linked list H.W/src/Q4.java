public class Q4 {
    //4.	Implement a rotate( ) method in the SinglyLinkedList class,
    // which has semantics equal to addLast(removeFirst( )), yet without creating any new node.
    //قم بتنفيذ دالةrotate( ) في SinglyLinkedList والتي لها دلالات تساوي (removeFirst( ))addLast ولكن دون انشاء عقده جديده؟

   // {بالتأكيد! هنا تنفيذ للطريقة rotate() في فئة SinglyLinkedList، والتي تتمتع بنفس السلوك كـ addLast(removeFirst())، ولكن دون إنشاء أي عقدة جديدة.

      //  في هذه الحالة، سنقوم بتدوير العقدة الأولى إلى نهاية القائمة المرتبطة بدلاً من إنشاء عقدة جديدة وإضافتها كعقدة جديدة في النهاية.




        public void rotate() {
        if (head == null || head.next == null) {
            return false; // لا يمكن تنفيذ التدوير إذا كانت القائمة فارغة أو تحتوي على عقدة واحدة فقط
        }

        Node firstNode = head;
        Node x = head;

        while (x.next != null) {
            x = x.next;
        }

        x= firstNode;
        head = firstNode.next;
        firstNode.next = null;
    }


       // في هذا التنفيذ، نحتاج إلى التحقق من أن القائمة تحتوي على ما لا يقل عن عقدتين (عقدة واحدة على الأقل لإجراء التدوير). إذا كان الرأس (head) يشير إلى null أو العقدة التالية (next) تشير إلى null، فلا يوجد شيء يمكننا فعله ويتم إرجاع الدالة.

        //إذا تم تحقيق شرط التدوير، نقوم بتعيين المؤشر firstNode على العقدة الأولى (head).

           // ثم نقوم بتحريك المؤشر current عبر القائمة حتى نصل إلى آخر عقدة في القائمة.

           // عندما نصل إلى آخر عقدة، نقوم بتعيين current.next ليشير إلى العقدة الأولى (firstNode)، بما في ذلك ربط العقدة الأخيرة بالعقدة الأولى.

       // ثم نقوم بتحديث الرأس (head) ليشير إلى العقدة الثانية في القائمة.

           // أخيرًا، نقوم بتحديث المؤشر next في العقدة الأولى (firstNode.next) ليشير إلى null، بمعنى أن العقدة الأولى تصبح العقدة الأخيرة في القائمة.

         //   بهذا التنفيذ، يتم تحقيق سلوك "إضافة العنصر الأخير وحذف العنصر الأول" بدون إنشاء أي عقدة جديدة.

           // أتمنى أن يكون الشرح واضحًا ومفهومًا. إذا كان لديك أي أسئلة إضافية، فلا تتردد في طرحها.
    }








}
